package swing;

import java.awt.*;
import java.awt.event.*;
import java.util.Enumeration;
import javax.swing.*;
import javax.swing.tree.*;

/*
 * Sunny Lee
 * To-Do Task List 
 */

public class ToDoTaskList extends JFrame implements ActionListener {
	private static final long serialVersionUID = 1L;

	private JTree tree;
	
	//create new node for ToDo List folder (top of tree)
	DefaultMutableTreeNode root = new DefaultMutableTreeNode("To Do List");
			
	//window, scroll bars, and text area
	JFrame frame = new JFrame("To Do Task List");
	
	//To Do List Constructor
	public ToDoTaskList() {	
		//set Window
		setSize(500, 600);
		setTitle("Sunny's To Do Task List");
		
		//close
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		
		//adding to window
		getContentPane().setLayout(new BorderLayout());
		
		//Adding button panel for tasks
		JPanel buttonPanel = new JPanel();
		JButton addButton = new JButton("Add Task");
		buttonPanel.add(addButton);
		addButton.addActionListener(this);
		JButton deleteButton = new JButton("Delete Task");
		buttonPanel.add(deleteButton);
		deleteButton.addActionListener(this);
		JButton changeButton = new JButton("Change Task Priority");
		buttonPanel.add(changeButton);
		changeButton.addActionListener(this);

		add(buttonPanel, BorderLayout.NORTH);
		
		//center window
		Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
		this.setLocation(dim.width/2 - this.getSize().width/2, dim.height/2 - this.getSize().height/2);
		
		//create nodes
		createPriorityNodes(root);
		
		//new tree under to do list
		tree = new JTree(root);
		
		//show all nodes in tree
		for (int i = 0; i < tree.getRowCount(); i++) {
	         tree.expandRow(i);
		}//end of showing all nodes in tree
					
		//putting tree in scroll pane panel
		JScrollPane scrollpane = new JScrollPane(tree);
		add(scrollpane, BorderLayout.CENTER);
	
		//create tree that allows one selection at a time
		tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
			
	}//end of To Do List constructor
		
	//create nodes
	private void createPriorityNodes(DefaultMutableTreeNode node) {
		
		//lists of predefined tasks
		String[] priority2 = {"Laundry", "Car Repair"};							//predefined tasks for priority 2
		String[] priority3 = {"Movie"};											//predefined tasks for priority 3
		String[] priority4 = {"Clean room", "Wash Dishes", "Do Laundry"};		//predefined tasks for priority 4
		String[] priority6 = {"Homework"};										//predefined tasks for priority 6
		String[] priority7 = {"See grandparents", "Walk the dog", "Get mail"};	//predefined tasks for priority 7
		String[] priority8 = {"Pay bills", "Add money to bank"};				//predefined tasks for priority 8
		String[] priority10 = {"Drink water", "Exercise"};						//predefined tasks for priority 10

		//adding 10 nodes
		for (int i = 1; i <= 10; i++) {	
			//adding priority nodes
			DefaultMutableTreeNode leaf = new DefaultMutableTreeNode("Priority "+ i);
			node.add(leaf);
			
			
			//adding predefined task nodes
			if (i == 2) {
				for (int j = 0; j < priority2.length; j++) {
					DefaultMutableTreeNode newLeaf = new DefaultMutableTreeNode(priority2[j]);
					leaf.add(newLeaf);
				}//end of adding priority 2 nodes
			} else if (i == 3) {
				for (int j = 0; j < priority3.length; j++) {
					DefaultMutableTreeNode newLeaf = new DefaultMutableTreeNode(priority3[j]);
					leaf.add(newLeaf);
				}//end of adding priority 3 nodes
			} else if (i == 4) {
				for (int j = 0; j < priority4.length; j++) {
					DefaultMutableTreeNode newLeaf = new DefaultMutableTreeNode(priority4[j]);
					leaf.add(newLeaf);
				}//end of adding priority 4 nodes
			} else if (i == 6) {
				for (int j = 0; j < priority6.length; j++) {
					DefaultMutableTreeNode newLeaf = new DefaultMutableTreeNode(priority6[j]);
					leaf.add(newLeaf);
				}//end of adding priority 6 nodes
			} else if (i == 7) {
				for (int j = 0; j < priority7.length; j++) {
					DefaultMutableTreeNode newLeaf = new DefaultMutableTreeNode(priority7[j]);
					leaf.add(newLeaf);
				}//end of adding priority 7 nodes
			} else if (i == 8) {
				for (int j = 0; j < priority8.length; j++) {
					DefaultMutableTreeNode newLeaf = new DefaultMutableTreeNode(priority8[j]);
					leaf.add(newLeaf);
				}//end of adding priority 8 nodes
			} else if (i == 10) {
				for (int j = 0; j < priority10.length; j++) {
					DefaultMutableTreeNode newLeaf = new DefaultMutableTreeNode(priority10[j]);
					leaf.add(newLeaf);
				}//end of adding priority 10 nodes
			}//end of adding predefined nodes
		}//end of for loop for creating 10 nodes	
	}//end of createPriorityNodes
	
	//actions for buttons
	public void actionPerformed(ActionEvent e) {
		String cmd = e.getActionCommand();							//action command
		
		DefaultTreeModel model = (DefaultTreeModel) tree.getModel();											//get tree model		
		DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent(); 	//Selected Node
		    	
		//add task
		if (cmd == "Add Task") {
			//if user selected priority
			if (selectedNode != null) {
				//Adding task prompt
				Object[] taskChoices = null;
				String task = (String) JOptionPane.showInputDialog(frame, "Please type in the task: ", "Add Task",
						JOptionPane.PLAIN_MESSAGE, new ImageIcon("add task.png"), taskChoices, null);

				//If user correctly entered a task string
				if ((task != null) && (task.length() > 0)) {
					DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(task);
					model.insertNodeInto(newNode, selectedNode, selectedNode.getChildCount());
					tree.scrollPathToVisible(new TreePath(newNode.getPath()));
			
				//if user did not enter task	
				} else {
					JOptionPane.showMessageDialog(frame, "Task was not added!", "ERROR", JOptionPane.ERROR_MESSAGE);
				} //no task name set, cancelled
			
			//no priority is selected	
			} else {
					JOptionPane.showMessageDialog(frame, "Please select a priority to add to!", "ERROR", JOptionPane.ERROR_MESSAGE);
			}//end of no priority selected
					
		//delete task
		} else if (cmd == "Delete Task") {	
			//if user selected a task
			if (selectedNode != null) {
				//double check to see if user wants to delete task
				int choice = JOptionPane.showConfirmDialog(frame, "Are you sure you want to delete this task?",
				    "Delete Task", JOptionPane.YES_NO_OPTION);
				
				//delete the task, choice is yes
				if (choice == 0) {
					model.removeNodeFromParent(selectedNode);
				//choice is no
				} else {
					JOptionPane.showMessageDialog(frame, "Task Not Deleted!", "Task Kept", JOptionPane.ERROR_MESSAGE);
				}//end of not deleting task
				
			//user did not select a task	
			} else {
				JOptionPane.showMessageDialog(frame, "No task selected for deletion!", "ERROR", JOptionPane.ERROR_MESSAGE);
			}//end of user not selecting task for deletion

		//change task priority
		} else if (cmd == "Change Task Priority") {
			//if user selected task to change
			if (selectedNode != null) {
			
				//choice dialog
				int choice = JOptionPane.showConfirmDialog(frame, "Are you sure you want to change the priority of this task?",
					    "Change Priority", JOptionPane.YES_NO_OPTION);
				
				//change the task, choice is yes
				if (choice == 0) {
					//choices for priorities and dialog
					Object[] priorityChoices = {"1", "2", "3", "4", "5", "6", "7", "8", "9", "10"};
					String priorityChoice = (String) JOptionPane.showInputDialog(frame, "Please choose a priority to change it to: ", 
							"Choose a Priority", JOptionPane.PLAIN_MESSAGE, new ImageIcon("priority.jpg"), priorityChoices, "1");
					
					//cancel option selected
					if (priorityChoice == null) {
						JOptionPane.showMessageDialog(frame, "Priority for task Not Changed!", "Priority unchanged", JOptionPane.ERROR_MESSAGE);
					
					//user selects a priority
					} else {
						//list of nodes
						@SuppressWarnings("unchecked")
						Enumeration <DefaultMutableTreeNode> treeList = root.children();

						//task to be moved
						Object taskNameToMove = (Object)selectedNode.toString();

						//checking the list for priority name
						while (	treeList.hasMoreElements())
						{
							//new node created to add to tree for changing node
							DefaultMutableTreeNode changeNode = treeList.nextElement();
							String taskPriority =  new String (changeNode.toString());			//task priority number in list
							String newTaskPriority = new String("Priority " + priorityChoice);	//task priority number to change to
							
							//if task priority number in list matches priority number to change task to
							if (taskPriority.equals(newTaskPriority)) 
							{
								DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(taskNameToMove);
								model.insertNodeInto(newNode, changeNode, changeNode.getChildCount()); 		//add task to new priority
								model.removeNodeFromParent(selectedNode);									//delete moved task
								tree.scrollPathToVisible(new TreePath(newNode.getPath()));					//show moved task
							}//end of if statement to matching priority numbers
						}//end of while loop for changing node 
					}//end of if priority choice made is a number	
					
				//choice is no for changing selection
				} else {
					JOptionPane.showMessageDialog(frame, "Priority for task Not Changed!", "Priority unchanged", JOptionPane.ERROR_MESSAGE);
				}//end of not changing task
				
			//if user did not make a selection	
			} else {
				JOptionPane.showMessageDialog(frame, "No task selection for changing priorities made!  Please try again!", 
						"ERROR!", JOptionPane.ERROR_MESSAGE);
			}//end of else if user does not make a selection
		}//end of change task priority			
	}//end of actions for buttons

	//main
	public static void main(String[] args) {		
		ToDoTaskList application = new ToDoTaskList();
		application.setVisible(true);
	}//end of main
}//end of To Do List
